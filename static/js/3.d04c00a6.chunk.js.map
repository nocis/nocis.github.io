{"version":3,"sources":["view/pages/Main/index.js","view/components/DecoderText/DecoderText.js","core/hooks/usePrefersReducedMotion.js"],"names":["Main","useState","scrollAnimation","startScroll","scrollAnimationHandler","document","documentElement","scrollTop","useEffect","addEventListener","removeEventListener","className","id","text","start","delay","glyphs","CharType","DecoderText","startDelay","rest","output","useRef","type","value","container","reduceMotion","window","matchMedia","matches","setReduceMotion","mediaQuery","handleMediaChange","addListener","removeListener","usePrefersReducedMotion","animation","containerInstance","current","content","split","renderOutput","characterMap","map","item","innerHTML","join","springValue","position","index","rand","Math","floor","random","length","shuffle","isPrerendered","chain","spring","from","to","stiffness","damping","stop","classNames","aria-hidden","ref","memo"],"mappings":"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","file":"static/js/3.d04c00a6.chunk.js","sourcesContent":["import classNames from \"classnames\";\nimport React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport DecoderText from \"../../components/DecoderText/DecoderText\";\nimport \"./Main.scss\";\nexport default function Main() {\n  const [scrollAnimation, startScroll] = useState(true);\n\n  const scrollAnimationHandler = () => {\n    //console.log(document.documentElement.scrollTop);\n    if (document.documentElement.scrollTop >= 200) {\n      startScroll(false);\n    } else {\n      startScroll(true);\n    }\n  };\n\n  useEffect(() => {\n    document.addEventListener(\"scroll\", scrollAnimationHandler);\n    return () => {\n      document.removeEventListener(\"scroll\", scrollAnimationHandler);\n    };\n  }, []);\n\n  return (\n    <div className=\"main\" id=\"main\">\n      <div className=\"copyright\">Background image is designed by starline</div>\n      <section className=\"main__text\">\n        <h1 className=\"main__name\">\n          <DecoderText text=\"Jared Yang\" start={true} delay={300} />\n        </h1>\n        <h2>I'm a Designer / Developer.</h2>\n      </section>\n      <div\n        className={\n          \"scroll-indicator \" +\n          (scrollAnimation ? \"scroll-indicator--entered\" : \"\")\n        }\n      ></div>\n    </div>\n  );\n}\n","import { useRef, useEffect, memo } from \"react\";\nimport classNames from \"classnames\";\nimport { usePrefersReducedMotion } from \"../../../core/hooks\";\nimport { spring, chain, delay, value } from \"popmotion\";\nimport { isPrerendered } from \"../../../core/utils\";\nimport \"./DecoderText.scss\";\n\n// prettier-ignore\nconst glyphs = [\n  'ア', 'イ', 'ウ', 'エ', 'オ',\n  'カ', 'キ', 'ク', 'ケ', 'コ',\n  'サ', 'シ', 'ス', 'セ', 'ソ',\n  'タ', 'チ', 'ツ', 'テ', 'ト',\n  'ナ', 'ニ', 'ヌ', 'ネ', 'ノ',\n  'ハ', 'ヒ', 'フ', 'ヘ', 'ホ',\n  'マ', 'ミ', 'ム', 'メ', 'モ',\n  'ヤ', 'ユ', 'ヨ', 'ー',\n  'ラ', 'リ', 'ル', 'レ', 'ロ',\n  'ワ', 'ヰ', 'ヱ', 'ヲ', 'ン',\n  'ガ', 'ギ', 'グ', 'ゲ', 'ゴ',\n  'ザ', 'ジ', 'ズ', 'ゼ', 'ゾ',\n  'ダ', 'ヂ', 'ヅ', 'デ', 'ド',\n  'バ', 'ビ', 'ブ', 'ベ', 'ボ',\n  'パ', 'ピ', 'プ', 'ペ', 'ポ',\n];\n\nconst CharType = {\n  Glyph: \"glyph\",\n  Value: \"value\",\n};\n\nfunction shuffle(content, output, position) {\n  return content.map((value, index) => {\n    if (index < position) {\n      return { type: CharType.Value, value };\n    }\n\n    if (position % 1 < 0.5) {\n      const rand = Math.floor(Math.random() * glyphs.length);\n      return { type: CharType.Glyph, value: glyphs[rand] };\n    }\n\n    return { type: CharType.Glyph, value: output[index].value };\n  });\n}\n\nconst DecoderText = ({\n  text,\n  start = true,\n  delay: startDelay = 0,\n  className,\n  ...rest\n}) => {\n  const output = useRef([{ type: CharType.Glyph, value: \"\" }]);\n  const container = useRef();\n  const reduceMotion = usePrefersReducedMotion();\n\n  useEffect(() => {\n    const containerInstance = container.current;\n    const content = text.split(\"\");\n    let animation;\n\n    const renderOutput = () => {\n      const characterMap = output.current.map((item) => {\n        return `<span class=\"decoder-text__${item.type}\">${item.value}</span>`;\n      });\n\n      containerInstance.innerHTML = characterMap.join(\"\");\n    };\n\n    const springValue = value(0, (position) => {\n      output.current = shuffle(content, output.current, position);\n      renderOutput();\n    });\n\n    if (start && !animation && !reduceMotion && !isPrerendered) {\n      animation = chain(\n        delay(startDelay),\n        spring({\n          from: 0,\n          to: content.length,\n          stiffness: 8,\n          damping: 5,\n        })\n      ).start(springValue);\n    }\n\n    if (reduceMotion) {\n      output.current = content.map((value, index) => ({\n        type: CharType.Value,\n        value: content[index],\n      }));\n      renderOutput();\n    }\n\n    return () => {\n      if (animation) {\n        animation.stop();\n      }\n    };\n  }, [reduceMotion, start, startDelay, text]);\n\n  return (\n    <span className={classNames(\"decoder-text\", className)} {...rest}>\n      <span aria-hidden className=\"decoder-text__content\" ref={container} />\n    </span>\n  );\n};\n\nexport default memo(DecoderText);\n","import { useEffect, useState } from \"react\";\n\nexport const usePrefersReducedMotion = () => {\n  const [reduceMotion, setReduceMotion] = useState(\n    () => window.matchMedia?.(\"(prefers-reduced-motion: reduce)\").matches\n  );\n\n  useEffect(() => {\n    const mediaQuery = window.matchMedia?.(\"(prefers-reduced-motion: reduce)\");\n\n    const handleMediaChange = () => {\n      setReduceMotion(mediaQuery?.matches);\n    };\n\n    mediaQuery?.addListener(handleMediaChange);\n    handleMediaChange();\n\n    return () => {\n      mediaQuery?.removeListener(handleMediaChange);\n    };\n  }, []);\n\n  return reduceMotion;\n};\n"],"sourceRoot":""}